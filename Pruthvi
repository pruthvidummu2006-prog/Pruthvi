# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# -------------------------------
# Step 1: Generate Synthetic Data
# -------------------------------

np.random.seed(42)  # For reproducibility
n_samples = 200

# Features
bedrooms = np.random.randint(1, 6, n_samples)
bathrooms = np.random.randint(1, 4, n_samples)
sqft_living = np.random.randint(600, 4000, n_samples)

# Target (price) - using a formula + some noise
price = (
    bedrooms * 50000 +
    bathrooms * 30000 +
    sqft_living * 200 +
    np.random.normal(0, 25000, n_samples)  # random noise
)

# Create DataFrame
data = pd.DataFrame({
    'bedrooms': bedrooms,
    'bathrooms': bathrooms,
    'sqft_living': sqft_living,
    'price': price
})

# -------------------------------
# Step 2: Train the Model
# -------------------------------

# Define features and label
X = data[['bedrooms', 'bathrooms', 'sqft_living']]
y = data['price']

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# -------------------------------
# Step 3: Evaluate the Model
# -------------------------------

y_pred = model.predict(X_test)

print("\nüîç Model Evaluation:")
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R¬≤ Score:", r2_score(y_test, y_pred))

# -------------------------------
# Step 4: Predict New House Price
# -------------------------------

# Example house
new_house = pd.DataFrame({
    'bedrooms': [3],
    'bathrooms': [2],
    'sqft_living': [1800]
})

predicted_price = model.predict(new_house)[0]
print(f"\nüí∞ Predicted Price for a 3BHK, 2 Bath, 1800 sqft house: ${predicted_price:,.2f}")

# -------------------------------
# Step 5: Visualization (Optional)
# -------------------------------

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted House Prices")
plt.grid(True)
plt.tight_layout()
plt.show()
